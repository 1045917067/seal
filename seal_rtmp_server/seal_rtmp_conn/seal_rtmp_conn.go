package seal_rtmp_conn

import (
	"UtilsTools/identify_panic"
	"encoding/binary"
	"fmt"
	"log"
	"net"
	"seal/seal_rtmp_server/seal_rtmp_protocol/handshake"
	"seal/seal_rtmp_server/seal_rtmp_protocol/protocol_stack"
	"sync"
)

//rtmp conn role.
const (
	RTMP_ROLE_UNKNOWN = 0

	RTMP_ROLE_PUBLISH = 1
	RTMP_ROLE_PALY    = 2
)

var MapPublishingStreams sync.Map

type RtmpConn struct {
	net.Conn
	TimeOut        uint32
	Chunks         map[uint32]*ChunkStream //key csid.
	TransactionIds map[float64]string      //key transaction id. value: request command name
	AckWindow      struct {
		ackWindowSize uint32 //
		hasAckedSize  uint64 //size has acked to peer
	}
	RecvBytesSum   uint64
	ChunkSize      uint32 //default is RTMP_DEFAULT_CHUNK_SIZE. can set by peer.
	Role           uint8  //publish or play.
	ObjectEncoding float64
	MetaData       struct {
		marker uint8
		value  interface{}
	}
	StreamInfo struct {
		stream string
		token  string
	}
}

func (rtmpSession *RtmpConn) HandleRtmpSession() {
	defer func() {
		if err := recover(); err != nil {
			log.Println(err, "-", identify_panic.IdentifyPanic())
		}

		rtmpSession.Conn.Close()
		MapPublishingStreams.Delete(rtmpSession.StreamInfo.stream)

		log.Println("One RtmpConn finished.remote=", rtmpSession.Conn.RemoteAddr())
	}()

	log.Println("One RtmpConn come in. remote=", rtmpSession.Conn.RemoteAddr())

	err := rtmpSession.HandShake()
	if err != nil {
		log.Println("rtmp handshake failed, err=", err)
		return
	}

	log.Println("rtmp handshake success.remote=", rtmpSession.Conn.RemoteAddr())

	err = rtmpSession.RtmpMsgLoop()

	log.Println("rtmp msg loop quit.err=", err, ",remote=", rtmpSession.Conn.RemoteAddr())
}

func (rtmp *RtmpConn) HandShake() (err error) {
	defer func() {
		if err := recover(); err != nil {
			log.Println(err, "-", identify_panic.IdentifyPanic())
		}
	}()

	var handshakeData [6146]uint8 // c0(1) + c1(1536) + c2(1536) + s0(1) + s1(1536) + s2(1536)

	c0 := handshakeData[:1]
	c1 := handshakeData[1:1537]
	c2 := handshakeData[1537:3073]

	s0 := handshakeData[3073:3074]
	s1 := handshakeData[3074:4610]
	s2 := handshakeData[4610:6146]

	c0c1 := handshakeData[0:1537]
	s0s1s2 := handshakeData[3073:6146]

	//recv c0c1
	err = rtmp.ExpectBytes(1537, c0c1)
	if err != nil {
		return
	}

	//parse c0
	if c0[0] != 3 {
		err = fmt.Errorf("client c0 is not 3.")
		return
	}

	//use complex handshake, if complex handshake failed, try use simple handshake
	//parse c1
	clientVer := binary.BigEndian.Uint32(c1[4:8])
	if 0 != clientVer {
		if !handshake.ComplexHandShake(c1, s0, s1, s2) {
			err = fmt.Errorf("0 != clientVer, complex handshake failed.")
			return
		}
	} else {
		//use simple handshake
		log.Println("0 == clientVer, client use simple handshake.")
		s0[0] = 3
		copy(s1, c2)
		copy(s2, c1)
	}

	//todo.

	s0s1s2 = []uint8{3, 0, 0, 0, 0, 13, 14, 10, 13, 239, 251, 4, 33, 136, 162, 150, 89, 239, 86, 203, 12, 248, 84, 198, 99, 26, 43, 142, 109, 252, 46, 148, 106, 180, 160, 140, 51, 131, 42, 142, 203, 39, 81, 198, 80, 151, 62, 211, 255, 31, 64, 106, 234, 30, 1, 220, 144, 210, 171, 26, 235, 222, 138, 221, 217, 78, 160, 3, 194, 204, 194, 141, 143, 42, 215, 104, 213, 152, 140, 44, 138, 214, 230, 73, 108, 131, 169, 197, 196, 99, 93, 208, 230, 142, 64, 216, 109, 25, 241, 75, 133, 193, 19, 158, 11, 143, 180, 47, 5, 146, 77, 89, 170, 37, 222, 161, 38, 113, 75, 190, 6, 91, 52, 241, 93, 241, 88, 55, 194, 33, 209, 181, 235, 166, 32, 185, 7, 237, 177, 76, 248, 42, 145, 52, 136, 46, 177, 231, 32, 251, 92, 158, 173, 54, 119, 26, 240, 121, 116, 145, 19, 23, 189, 46, 1, 177, 57, 0, 198, 225, 121, 178, 187, 193, 45, 121, 90, 90, 85, 141, 251, 93, 214, 174, 205, 43, 246, 151, 72, 205, 131, 207, 38, 51, 205, 123, 38, 127, 37, 193, 152, 101, 57, 182, 162, 125, 43, 114, 207, 220, 15, 3, 247, 248, 125, 198, 141, 225, 179, 212, 164, 110, 202, 75, 81, 109, 192, 78, 122, 114, 145, 172, 47, 194, 191, 221, 126, 147, 235, 119, 175, 168, 67, 102, 26, 88, 164, 232, 184, 67, 215, 12, 201, 97, 118, 144, 241, 160, 37, 58, 238, 98, 102, 158, 226, 75, 49, 219, 97, 71, 79, 252, 223, 159, 77, 94, 197, 69, 243, 81, 8, 41, 5, 56, 215, 24, 74, 209, 58, 223, 243, 202, 0, 96, 211, 80, 74, 40, 76, 89, 195, 35, 149, 132, 215, 38, 88, 67, 244, 13, 203, 88, 115, 86, 222, 135, 72, 113, 126, 31, 179, 117, 208, 142, 39, 238, 238, 215, 124, 14, 124, 163, 143, 192, 115, 56, 98, 38, 223, 174, 67, 173, 116, 165, 160, 138, 233, 239, 100, 49, 199, 132, 183, 116, 243, 164, 228, 229, 6, 62, 122, 13, 120, 185, 62, 138, 115, 182, 178, 214, 248, 43, 126, 179, 113, 48, 172, 17, 60, 3, 147, 160, 200, 23, 9, 16, 64, 225, 60, 46, 5, 153, 101, 8, 231, 8, 192, 20, 194, 158, 190, 2, 246, 142, 227, 98, 58, 206, 223, 109, 92, 26, 150, 156, 39, 143, 24, 177, 114, 186, 128, 248, 150, 104, 174, 212, 84, 59, 38, 229, 40, 94, 117, 68, 57, 133, 13, 98, 187, 44, 45, 1, 156, 90, 3, 37, 185, 230, 251, 144, 189, 74, 70, 50, 46, 217, 115, 173, 115, 117, 155, 110, 41, 106, 42, 114, 110, 3, 238, 193, 89, 115, 250, 194, 175, 206, 26, 132, 209, 221, 178, 174, 242, 149, 225, 213, 124, 115, 101, 186, 21, 101, 3, 2, 147, 102, 118, 122, 247, 87, 56, 29, 71, 101, 254, 73, 231, 221, 128, 111, 108, 162, 40, 21, 185, 8, 214, 233, 112, 149, 59, 143, 111, 111, 141, 245, 157, 89, 34, 231, 192, 60, 135, 187, 68, 156, 72, 181, 223, 89, 207, 162, 185, 73, 17, 93, 109, 56, 94, 211, 23, 134, 212, 96, 212, 168, 0, 139, 196, 88, 88, 48, 151, 93, 61, 162, 13, 119, 27, 22, 40, 28, 7, 163, 217, 98, 240, 158, 82, 110, 223, 47, 102, 83, 193, 227, 252, 220, 103, 22, 27, 112, 190, 101, 208, 54, 76, 151, 75, 234, 222, 20, 105, 48, 113, 90, 16, 8, 164, 94, 132, 104, 47, 54, 21, 147, 98, 121, 191, 105, 37, 144, 222, 81, 185, 122, 41, 31, 152, 101, 113, 240, 153, 77, 154, 175, 121, 11, 232, 112, 132, 103, 32, 254, 84, 235, 229, 99, 51, 100, 136, 13, 238, 61, 172, 80, 90, 243, 197, 136, 251, 45, 34, 58, 184, 33, 203, 245, 22, 172, 222, 250, 15, 217, 108, 50, 155, 160, 9, 96, 90, 195, 78, 35, 132, 118, 88, 52, 129, 10, 156, 133, 52, 175, 159, 100, 77, 7, 146, 153, 11, 178, 192, 130, 25, 60, 162, 179, 85, 88, 200, 196, 170, 22, 56, 157, 226, 114, 10, 94, 183, 75, 203, 56, 244, 140, 212, 45, 159, 59, 26, 23, 27, 107, 253, 9, 81, 202, 149, 128, 89, 36, 57, 78, 245, 157, 229, 14, 229, 181, 156, 200, 23, 108, 176, 151, 18, 65, 20, 11, 249, 236, 14, 64, 123, 119, 152, 166, 163, 73, 27, 154, 194, 93, 56, 184, 107, 219, 25, 39, 229, 41, 34, 3, 29, 254, 220, 198, 9, 116, 21, 58, 8, 196, 72, 49, 220, 5, 76, 121, 57, 105, 170, 148, 160, 188, 186, 204, 180, 40, 166, 247, 233, 233, 144, 31, 24, 252, 251, 121, 8, 217, 3, 51, 111, 11, 93, 92, 18, 67, 34, 127, 14, 36, 190, 56, 53, 24, 183, 168, 187, 43, 220, 77, 40, 91, 167, 31, 59, 66, 37, 130, 249, 146, 25, 243, 171, 21, 181, 90, 16, 218, 185, 5, 231, 167, 14, 168, 246, 250, 149, 251, 192, 45, 243, 198, 251, 222, 159, 144, 245, 129, 178, 37, 138, 108, 61, 106, 122, 91, 47, 192, 191, 134, 84, 20, 182, 33, 254, 134, 26, 189, 141, 106, 191, 178, 233, 203, 85, 24, 227, 31, 21, 186, 23, 90, 147, 241, 143, 246, 8, 239, 62, 232, 64, 92, 7, 206, 134, 216, 51, 70, 144, 30, 235, 220, 200, 139, 149, 29, 230, 169, 140, 208, 1, 60, 168, 64, 81, 70, 212, 136, 5, 184, 131, 120, 88, 171, 15, 34, 112, 152, 215, 175, 113, 215, 205, 183, 220, 126, 179, 192, 144, 123, 174, 39, 149, 59, 107, 180, 0, 47, 210, 196, 201, 48, 171, 129, 170, 102, 206, 220, 123, 38, 47, 224, 0, 98, 213, 34, 252, 244, 61, 223, 0, 204, 98, 231, 176, 106, 232, 47, 43, 54, 140, 243, 195, 174, 201, 141, 47, 21, 156, 248, 39, 42, 111, 2, 37, 179, 235, 44, 129, 31, 219, 104, 110, 128, 118, 210, 140, 95, 104, 7, 119, 62, 236, 159, 48, 102, 57, 251, 36, 171, 182, 140, 209, 78, 121, 210, 134, 185, 50, 193, 144, 96, 67, 138, 235, 52, 196, 246, 10, 34, 57, 253, 74, 154, 77, 76, 121, 73, 91, 160, 228, 191, 251, 210, 35, 50, 204, 124, 55, 148, 148, 153, 154, 24, 166, 7, 161, 251, 96, 129, 83, 157, 171, 138, 77, 185, 167, 11, 92, 46, 98, 186, 75, 235, 8, 176, 137, 154, 196, 123, 84, 244, 243, 69, 81, 121, 10, 12, 235, 235, 136, 109, 70, 16, 230, 154, 145, 8, 179, 16, 131, 138, 83, 15, 136, 56, 48, 153, 131, 33, 90, 207, 157, 239, 191, 82, 139, 175, 149, 89, 135, 164, 251, 20, 209, 97, 16, 156, 182, 178, 79, 145, 83, 186, 34, 6, 70, 200, 72, 27, 82, 121, 105, 196, 109, 236, 126, 180, 61, 18, 154, 136, 163, 21, 97, 80, 51, 114, 9, 80, 179, 157, 154, 211, 67, 114, 64, 179, 78, 88, 9, 220, 63, 166, 1, 26, 56, 149, 193, 182, 108, 87, 163, 114, 124, 0, 124, 8, 11, 18, 77, 169, 72, 209, 192, 249, 13, 224, 143, 66, 188, 55, 224, 64, 151, 189, 234, 156, 209, 219, 53, 97, 38, 140, 247, 192, 128, 10, 1, 89, 123, 217, 208, 190, 253, 65, 29, 41, 231, 47, 139, 209, 50, 88, 190, 247, 102, 103, 228, 153, 23, 212, 204, 55, 94, 43, 165, 89, 54, 65, 51, 132, 108, 113, 217, 190, 130, 127, 184, 82, 38, 21, 107, 132, 66, 98, 98, 5, 77, 28, 227, 169, 251, 223, 197, 109, 195, 21, 106, 241, 135, 66, 185, 77, 50, 65, 101, 229, 156, 224, 128, 114, 93, 46, 137, 28, 94, 148, 2, 95, 68, 106, 163, 54, 107, 190, 253, 250, 221, 9, 115, 139, 100, 108, 224, 0, 46, 9, 71, 120, 30, 168, 106, 104, 211, 11, 66, 45, 171, 193, 39, 48, 90, 46, 130, 207, 194, 109, 222, 146, 28, 136, 231, 183, 81, 76, 151, 50, 174, 227, 26, 25, 161, 68, 45, 60, 220, 101, 25, 184, 128, 105, 126, 42, 127, 31, 213, 197, 203, 227, 70, 201, 208, 179, 213, 112, 86, 44, 101, 10, 117, 30, 57, 74, 14, 68, 170, 110, 202, 82, 165, 150, 208, 140, 224, 198, 64, 199, 104, 249, 150, 79, 48, 211, 25, 151, 0, 75, 208, 0, 98, 172, 0, 223, 97, 84, 248, 226, 194, 134, 111, 125, 63, 251, 10, 17, 30, 73, 115, 25, 243, 160, 62, 181, 96, 84, 122, 1, 174, 73, 103, 198, 150, 152, 132, 124, 32, 137, 220, 13, 131, 16, 101, 63, 136, 156, 216, 210, 254, 44, 99, 61, 168, 1, 24, 107, 243, 107, 206, 63, 236, 52, 162, 101, 118, 92, 66, 103, 95, 223, 109, 250, 176, 131, 5, 244, 212, 179, 243, 151, 153, 190, 49, 68, 154, 153, 58, 222, 237, 220, 131, 169, 16, 163, 72, 180, 83, 229, 236, 90, 36, 219, 179, 92, 155, 233, 163, 5, 69, 225, 49, 107, 176, 154, 87, 204, 59, 232, 64, 130, 113, 133, 175, 75, 16, 206, 204, 205, 187, 45, 51, 39, 241, 196, 65, 104, 194, 180, 226, 245, 64, 226, 40, 169, 190, 135, 109, 189, 226, 30, 111, 81, 24, 0, 69, 136, 29, 152, 185, 114, 226, 255, 86, 209, 170, 93, 41, 202, 102, 247, 149, 55, 80, 88, 231, 6, 139, 82, 147, 174, 223, 35, 162, 167, 211, 143, 157, 240, 68, 31, 105, 169, 207, 157, 127, 247, 228, 18, 96, 99, 24, 120, 141, 0, 219, 1, 93, 58, 109, 15, 6, 157, 245, 100, 91, 70, 231, 104, 120, 45, 225, 200, 202, 116, 199, 74, 210, 46, 152, 177, 61, 191, 195, 94, 180, 189, 113, 112, 223, 35, 230, 127, 211, 18, 201, 124, 216, 73, 52, 148, 248, 230, 193, 127, 135, 157, 190, 166, 129, 0, 145, 0, 177, 220, 18, 173, 223, 5, 30, 28, 95, 203, 144, 87, 5, 82, 213, 234, 119, 86, 214, 196, 184, 37, 62, 249, 113, 18, 4, 217, 79, 104, 116, 195, 253, 85, 104, 14, 36, 254, 77, 212, 103, 119, 71, 33, 122, 227, 242, 255, 186, 90, 246, 131, 224, 54, 58, 8, 7, 29, 12, 22, 17, 253, 255, 246, 43, 79, 100, 155, 209, 82, 222, 186, 222, 52, 184, 47, 200, 158, 117, 51, 37, 22, 156, 160, 216, 6, 101, 250, 239, 108, 161, 17, 107, 10, 83, 178, 110, 3, 255, 138, 143, 246, 239, 145, 32, 44, 111, 108, 27, 0, 173, 222, 31, 218, 91, 61, 107, 60, 1, 102, 76, 31, 38, 114, 57, 61, 6, 110, 155, 128, 251, 119, 58, 117, 172, 95, 169, 143, 218, 130, 103, 65, 89, 58, 105, 175, 244, 254, 67, 197, 68, 77, 67, 126, 106, 144, 29, 118, 179, 61, 101, 12, 61, 94, 183, 127, 156, 207, 247, 43, 211, 228, 72, 109, 30, 65, 122, 1, 46, 43, 170, 168, 188, 67, 128, 26, 12, 45, 228, 98, 146, 41, 94, 106, 115, 165, 20, 92, 14, 30, 224, 87, 200, 29, 169, 72, 52, 190, 13, 228, 240, 85, 153, 185, 217, 154, 109, 222, 75, 98, 24, 65, 104, 76, 132, 118, 183, 130, 225, 123, 238, 131, 142, 238, 151, 58, 104, 105, 87, 28, 86, 116, 176, 12, 132, 247, 226, 195, 28, 133, 90, 208, 16, 30, 105, 185, 43, 133, 48, 60, 77, 191, 253, 234, 101, 22, 208, 47, 161, 123, 242, 228, 197, 72, 70, 201, 86, 34, 240, 53, 8, 165, 215, 253, 201, 251, 246, 114, 137, 101, 233, 219, 90, 34, 157, 171, 75, 103, 32, 168, 140, 12, 115, 199, 39, 96, 67, 8, 69, 197, 237, 32, 161, 23, 108, 205, 81, 56, 254, 141, 192, 2, 230, 63, 21, 139, 154, 143, 61, 204, 141, 191, 239, 156, 150, 148, 1, 162, 238, 112, 174, 168, 45, 187, 244, 9, 146, 217, 0, 64, 85, 254, 43, 205, 185, 158, 121, 169, 117, 44, 23, 218, 46, 190, 14, 168, 193, 206, 247, 184, 111, 118, 82, 43, 160, 104, 222, 218, 155, 139, 117, 125, 38, 192, 244, 14, 157, 13, 228, 177, 15, 42, 132, 122, 198, 167, 101, 237, 19, 62, 53, 205, 88, 153, 106, 187, 6, 111, 21, 176, 0, 71, 226, 7, 35, 220, 74, 252, 88, 8, 229, 143, 2, 115, 69, 184, 54, 202, 178, 42, 21, 13, 182, 37, 6, 56, 91, 56, 187, 206, 18, 37, 89, 232, 72, 2, 199, 6, 67, 65, 245, 40, 247, 112, 72, 177, 164, 3, 101, 134, 20, 190, 47, 28, 36, 40, 182, 73, 42, 144, 89, 208, 236, 44, 124, 132, 213, 229, 10, 199, 108, 135, 253, 139, 222, 185, 51, 206, 3, 172, 67, 161, 238, 59, 191, 13, 227, 198, 139, 13, 236, 255, 224, 134, 200, 138, 168, 215, 82, 137, 1, 29, 64, 234, 57, 119, 162, 19, 25, 14, 217, 186, 52, 24, 3, 200, 24, 51, 119, 209, 121, 197, 91, 231, 90, 52, 63, 166, 71, 204, 102, 74, 53, 27, 175, 45, 102, 241, 137, 42, 113, 215, 78, 196, 114, 240, 187, 251, 60, 193, 67, 20, 209, 253, 24, 158, 212, 45, 198, 28, 7, 179, 161, 238, 194, 33, 153, 173, 227, 220, 192, 202, 226, 124, 23, 89, 142, 247, 162, 16, 112, 112, 51, 227, 110, 211, 46, 125, 64, 105, 170, 218, 70, 180, 214, 21, 177, 128, 144, 248, 88, 131, 122, 195, 77, 235, 146, 32, 211, 234, 221, 17, 47, 255, 237, 9, 52, 143, 18, 242, 96, 153, 51, 137, 19, 59, 30, 201, 138, 48, 69, 19, 100, 230, 66, 193, 130, 18, 223, 31, 98, 178, 107, 68, 95, 201, 13, 15, 7, 104, 113, 176, 195, 35, 193, 219, 191, 7, 233, 102, 70, 78, 66, 130, 59, 229, 23, 113, 45, 3, 149, 247, 164, 14, 128, 125, 172, 117, 14, 220, 83, 219, 14, 195, 202, 161, 158, 175, 226, 225, 66, 231, 200, 217, 239, 238, 13, 215, 74, 195, 30, 80, 162, 39, 89, 47, 212, 74, 91, 7, 174, 240, 242, 40, 233, 62, 15, 173, 63, 57, 235, 112, 179, 246, 83, 200, 83, 5, 173, 177, 232, 208, 68, 22, 112, 93, 203, 140, 37, 201, 55, 151, 55, 38, 216, 69, 217, 138, 123, 90, 76, 228, 191, 202, 36, 222, 37, 127, 39, 179, 67, 115, 13, 50, 170, 31, 44, 7, 218, 243, 194, 142, 141, 26, 47, 4, 130, 28, 54, 128, 176, 163, 149, 62, 72, 108, 160, 141, 204, 250, 125, 180, 233, 55, 7, 194, 166, 2, 145, 118, 138, 244, 75, 53, 216, 42, 51, 205, 171, 175, 185, 70, 109, 184, 174, 180, 5, 196, 82, 149, 231, 37, 252, 170, 65, 213, 135, 245, 84, 24, 56, 112, 192, 127, 117, 220, 211, 100, 157, 27, 218, 138, 180, 118, 211, 230, 176, 218, 193, 41, 213, 144, 2, 192, 95, 94, 80, 40, 93, 132, 98, 14, 251, 45, 248, 17, 71, 226, 191, 32, 141, 121, 32, 36, 157, 206, 158, 116, 243, 20, 181, 215, 152, 231, 56, 64, 163, 251, 42, 159, 236, 175, 79, 1, 189, 140, 123, 26, 110, 171, 113, 0, 135, 236, 9, 156, 155, 78, 208, 166, 160, 83, 8, 62, 106, 81, 138, 130, 5, 148, 16, 83, 71, 92, 138, 67, 177, 47, 99, 220, 66, 103, 59, 142, 238, 231, 0, 77, 179, 72, 94, 124, 206, 93, 126, 235, 51, 221, 78, 236, 35, 166, 93, 150, 232, 86, 6, 207, 49, 211, 246, 50, 13, 149, 90, 229, 121, 62, 155, 112, 163, 152, 19, 125, 251, 210, 198, 139, 120, 78, 156, 19, 238, 232, 62, 172, 191, 66, 0, 126, 38, 18, 20, 3, 129, 161, 209, 80, 36, 254, 199, 179, 101, 107, 34, 248, 217, 91, 145, 238, 127, 130, 214, 60, 48, 225, 233, 174, 63, 62, 152, 190, 189, 178, 33, 151, 223, 155, 60, 60, 231, 146, 211, 249, 109, 192, 72, 210, 176, 176, 71, 57, 239, 22, 43, 110, 237, 200, 189, 45, 180, 246, 60, 117, 33, 170, 215, 126, 175, 25, 28, 126, 149, 210, 74, 254, 126, 87, 29, 125, 75, 204, 62, 30, 171, 127, 84, 86, 84, 10, 221, 141, 228, 9, 144, 250, 20, 9, 47, 77, 165, 190, 82, 184, 204, 214, 0, 57, 64, 28, 217, 102, 49, 31, 170, 15, 163, 1, 244, 122, 202, 58, 3, 211, 236, 178, 132, 185, 109, 188, 218, 158, 158, 208, 18, 201, 30, 97, 177, 37, 23, 241, 171, 120, 166, 74, 46, 73, 243, 16, 78, 33, 24, 0, 212, 110, 134, 121, 175, 22, 43, 210, 12, 244, 84, 173, 91, 62, 151, 167, 91, 19, 130, 132, 240, 233, 82, 11, 167, 86, 71, 194, 180, 25, 185, 134, 219, 75, 73, 235, 121, 19, 175, 41, 115, 24, 192, 11, 146, 97, 213, 119, 104, 88, 250, 48, 68, 40, 3, 136, 184, 60, 102, 63, 84, 102, 28, 72, 223, 24, 58, 78, 233, 4, 48, 196, 174, 205, 97, 224, 129, 183, 4, 209, 252, 254, 162, 110, 108, 250, 225, 202, 34, 156, 7, 223, 188, 116, 166, 45, 123, 77, 184, 42, 231, 80, 203, 81, 38, 237, 211, 176, 123, 85, 147, 26, 11, 70, 144, 216, 44, 234, 239, 36, 234, 62, 161, 13, 119, 248, 87, 9, 228, 200, 209, 143, 199, 231, 193, 91, 65, 20, 244, 115, 55, 28, 227, 60, 85, 54, 47, 217, 221, 69, 75, 239, 71, 74, 236, 24, 223, 219, 79, 203, 202, 237, 220, 236, 199, 199, 65, 158, 165, 214, 168, 216, 186, 189, 25, 50, 61, 225, 153, 37, 241, 193, 46, 102, 227, 29, 73, 229, 229, 169, 56, 96, 134, 68, 17, 37, 206, 21, 184, 156, 157, 184, 8}

	//send s0s1s2
	err = rtmp.SendBytes(s0s1s2)
	if err != nil {
		return
	}

	//recv c2
	err = rtmp.ExpectBytes(uint32(len(c2)), c2)
	if err != nil {
		return
	}

	//c2 do not need verify.

	return
}

func (rtmpSession *RtmpConn) RtmpMsgLoop() (err error) {

	defer func() {
		if err := recover(); err != nil {
			log.Println(err, ", panic at ", identify_panic.IdentifyPanic())
		}
	}()

	for {
		var chunkStreamId uint32
		err, chunkStreamId = rtmpSession.RecvMsg()
		if err != nil {
			break
		}

		err = rtmpSession.HanleMsg(chunkStreamId)
		if err != nil {
			break
		}
	}

	if err != nil {
		return
	}

	return
}

func (rtmp *RtmpConn) HanleMsg(chunkStreamId uint32) (err error) {
	defer func() {
		if err := recover(); err != nil {
			log.Println(err, "-", identify_panic.IdentifyPanic())
		}
	}()

	chunk := rtmp.Chunks[chunkStreamId]
	if nil == chunk {
		err = fmt.Errorf("HanleMsg:can not find the chunk strema id in chuns.")
		return
	}

	switch chunk.msg.header.typeId {
	case protocol_stack.RTMP_MSG_AMF3CommandMessage, protocol_stack.RTMP_MSG_AMF0CommandMessage,
		protocol_stack.RTMP_MSG_AMF0DataMessage, protocol_stack.RTMP_MSG_AMF3DataMessage:
		err = rtmp.handleAMFCommandAndDataMessage(&chunk.msg)
	case protocol_stack.RTMP_MSG_UserControlMessage:
		err = rtmp.handleUserControlMessage(&chunk.msg)
	case protocol_stack.RTMP_MSG_WindowAcknowledgementSize:
		err = rtmp.handleSetWindowAcknowledgementSize(&chunk.msg)
	case protocol_stack.RTMP_MSG_SetChunkSize:
		err = rtmp.handleSetChunkSize(&chunk.msg)
	case protocol_stack.RTMP_MSG_SetPeerBandwidth:
		err = rtmp.handleSetPeerBandWidth(&chunk.msg)
	case protocol_stack.RTMP_MSG_Acknowledgement:
		err = rtmp.handleAcknowlegement(&chunk.msg)
	case protocol_stack.RTMP_MSG_AbortMessage:
		err = rtmp.handleAbortMsg(&chunk.msg)
	case protocol_stack.RTMP_MSG_EdgeAndOriginServerCommand:
		err = rtmp.handleEdgeAndOriginServerCommand(&chunk.msg)
	case protocol_stack.RTMP_MSG_AMF3SharedObject:
		//todo
	case protocol_stack.RTMP_MSG_AMF0SharedObject:
		//todo
	case protocol_stack.RTMP_MSG_AudioMessage:
		err = rtmp.handleMsgAudio(&chunk.msg)
	case protocol_stack.RTMP_MSG_VideoMessage:
		err = rtmp.handleMsgVideo(&chunk.msg)
	case protocol_stack.RTMP_MSG_AggregateMessage:
		//todo.
	default:
		err = fmt.Errorf("HanleMsg: unknown msg type. typeid=", chunk.msg.header.typeId)
	}

	if err != nil {
		return
	}

	return
}
